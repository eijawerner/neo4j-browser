/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Neo4j is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import { render } from '@testing-library/react'
import React from 'react'

import MdSlide from './MdSlide'

describe('MdSlide', () => {
  beforeAll(() => {
    // Error Boundary prints md parse errors to console, this mock is to not clutter test output
    jest.spyOn(console, 'error').mockImplementation(() => {})
  })

  afterAll(() => {
    ;(console.error as unknown as jest.SpyInstance).mockRestore()
  })

  it('retains standard markup generated by markdown', () => {
    const md = '# Title'

    const { container } = render(<MdSlide md={md} />)

    expect(
      (container.querySelector('h1') as HTMLHeadingElement).textContent
    ).toEqual('Title')
  })

  it('renders an error message when md contains syntax errors', () => {
    const md = `<d
    iv>asdf</div>`

    const { container } = render(<MdSlide md={md} />)

    expect(
      (container.querySelector('pre') as HTMLPreElement).textContent
    ).toEqual('Error: closing tag must match opening tag name!')
  })

  it('renders an error message when jsx js expression contains any non-literal', () => {
    const md = `<div>{alert('foo')}</div>`

    const { container } = render(<MdSlide md={md} />)

    expect(
      (container.querySelector('pre') as HTMLPreElement).textContent
    ).toContain(`Unexpected plaintext token: "alert('foo')"`)
  })

  it('renders an error message when jsx contains event listeners', () => {
    const md = `<h1 onClick={"foo"}>bar</h1>`

    const { container } = render(<MdSlide md={md} />)

    expect(
      (container.querySelector('pre') as HTMLPreElement).textContent
    ).toEqual(`Event binder onClick found in h1`)
  })
})
